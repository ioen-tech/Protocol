/**
 * Defines AdminWebsocket, an easy-to-use websocket implementation of the
 * Conductor Admin API
 *
 *    const client = AdminWebsocket.connect(
 *      'ws://localhost:9000'
 *    )
 *
 *    client.generateAgentPubKey()
 *      .then(agentPubKey => {
 *        console.log('Agent successfully generated:', agentPubKey)
 *      })
 *      .catch(err => {
 *        console.error('problem generating agent:', err)
 *      })
 */
import * as Api from "./types.js";
import { WsClient } from "../client.js";
import { Transformer, Requester } from "../common.js";
export declare class AdminWebsocket implements Api.AdminApi {
    client: WsClient;
    defaultTimeout: number;
    constructor(client: WsClient, defaultTimeout?: number);
    static connect(url: string, defaultTimeout?: number): Promise<AdminWebsocket>;
    _requester: <ReqO, ReqI, ResI, ResO>(tag: string, transformer?: Transformer<ReqO, ReqI, ResI, ResO> | undefined) => (req: ReqO, timeout?: number | undefined) => Promise<ResO>;
    attachAppInterface: Requester<Api.AttachAppInterfaceRequest, Api.AttachAppInterfaceResponse>;
    activateApp: Requester<Api.ActivateAppRequest, Api.ActivateAppResponse>;
    deactivateApp: Requester<Api.DeactivateAppRequest, Api.DeactivateAppResponse>;
    enableApp: Requester<Api.EnableAppRequest, Api.EnableAppResponse>;
    disableApp: Requester<Api.DisableAppRequest, Api.DisableAppResponse>;
    startApp: Requester<Api.StartAppRequest, Api.StartAppResponse>;
    dumpState: Requester<Api.DumpStateRequest, Api.DumpStateResponse>;
    dumpFullState: Requester<Api.DumpFullStateRequest, Api.DumpFullStateResponse>;
    generateAgentPubKey: Requester<Api.GenerateAgentPubKeyRequest, Api.GenerateAgentPubKeyResponse>;
    registerDna: Requester<Api.RegisterDnaRequest, Api.RegisterDnaResponse>;
    installApp: Requester<Api.InstallAppRequest, Api.InstallAppResponse>;
    uninstallApp: Requester<Api.UninstallAppRequest, Api.UninstallAppResponse>;
    installAppBundle: Requester<Api.InstallAppBundleRequest, Api.InstallAppBundleResponse>;
    createCloneCell: Requester<Api.CreateCloneCellRequest, Api.CreateCloneCellResponse>;
    listDnas: Requester<Api.ListDnasRequest, Api.ListDnasResponse>;
    listCellIds: Requester<Api.ListCellIdsRequest, Api.ListCellIdsResponse>;
    listActiveApps: Requester<Api.ListActiveAppsRequest, Api.ListActiveAppsResponse>;
    listApps: Requester<Api.ListAppsRequest, Api.ListAppsResponse>;
    listAppInterfaces: Requester<Api.ListAppInterfacesRequest, Api.ListAppInterfacesResponse>;
    requestAgentInfo: Requester<Api.RequestAgentInfoRequest, Api.RequestAgentInfoResponse>;
    addAgentInfo: Requester<Api.AddAgentInfoRequest, Api.AddAgentInfoResponse>;
}
